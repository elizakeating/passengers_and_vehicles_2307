require "./lib/passenger"
require "./lib/vehicle"
require "./lib/park"

RSpec.describe Park do
  describe "#initialize" do
    it "exists" do
      park = Park.new("Windmill Park", 5)
      
      expect(park).to be_a(Park)
    end
  end
  
  describe "#name" do
    it "returns name of the park" do
      park = Park.new("Windmill Park", 5)
      
      expect(park.name).to eq("Windmill Park")
    end
  end
  
  describe "#admission_price" do
    it "returns admission price of the park" do
      park = Park.new("Windmill Park", 5)
      
      expect(park.admission_price).to eq(5)
    end
  end
  
  describe "#vehicles" do
    it "returns vehicles that have entered the park" do
      park = Park.new("Windmill Park", 5)
      
      expect(park.vehicles).to eq([])
    end
  end
  
  describe "#add_vehicle" do
    it "adds vehicle to the park" do
      park = Park.new("Windmill Park", 5)

      vehicle = Vehicle.new("2001", "Honda", "Civic")
      vehicle_2 = Vehicle.new("2020", "Chevy", "Silverado")

      park.add_vehicle(vehicle)

      expect(park.vehicles).to eq([vehicle])

      park.add_vehicle(vehicle_2)

      expect(park.vehicles).to eq([vehicle, vehicle_2])
    end
  end

  describe "#passengers" do
    it "returns passengers of vehicles that entered the park" do
      park = Park.new("Windmill Park", 5)

      vehicle = Vehicle.new("2001", "Honda", "Civic")
      vehicle_2 = Vehicle.new("2020", "Chevy", "Silverado")

      charlie = Passenger.new({"name" => "Charlie", "age" => 18})
      jude = Passenger.new({"name" => "Jude", "age" => 20})    
      taylor = Passenger.new({"name" => "Taylor", "age" => 12})

      max = Passenger.new({"name" => "Max", "age" => 23})
      alice = Passenger.new({"name" => "Alice", "age" => 21})

      vehicle.add_passenger(charlie)
      vehicle.add_passenger(jude)
      vehicle.add_passenger(taylor)

      vehicle_2.add_passenger(max)
      vehicle_2.add_passenger(alice)

      park.add_vehicle(vehicle)

      expect(park.passengers).to eq([charlie, jude, taylor])

      park.add_vehicle(vehicle_2)
      
      expect(park.passengers).to eq([charlie, jude, taylor, max, alice])
    end
  end

  describe "#revenue" do
    it "returns revenue generated by parks visitors" do
      park = Park.new("Windmill Park", 5)

      vehicle = Vehicle.new("2001", "Honda", "Civic")
      vehicle_2 = Vehicle.new("2020", "Chevy", "Silverado")

      charlie = Passenger.new({"name" => "Charlie", "age" => 18})
      jude = Passenger.new({"name" => "Jude", "age" => 20})    
      taylor = Passenger.new({"name" => "Taylor", "age" => 12})

      max = Passenger.new({"name" => "Max", "age" => 23})
      alice = Passenger.new({"name" => "Alice", "age" => 21})

      vehicle.add_passenger(charlie)
      vehicle.add_passenger(jude)
      vehicle.add_passenger(taylor)

      vehicle_2.add_passenger(max)
      vehicle_2.add_passenger(alice)

      park.add_vehicle(vehicle)

      expect(park.revenue).to eq(10)

      park.add_vehicle(vehicle_2)

      expect(park.revenue).to eq(20)
    end
  end

  describe "#all_attendees" do
    it "returns all attendees names, sorted alphabetically" do
      park = Park.new("Windmill Park", 5)

      vehicle = Vehicle.new("2001", "Honda", "Civic")
      vehicle_2 = Vehicle.new("2020", "Chevy", "Silverado")

      charlie = Passenger.new({"name" => "Charlie", "age" => 18})
      jude = Passenger.new({"name" => "Jude", "age" => 20})    
      taylor = Passenger.new({"name" => "Taylor", "age" => 12})
      jill = Passenger.new({"name" => "Jill", "age" => 10})

      max = Passenger.new({"name" => "Max", "age" => 23})
      alice = Passenger.new({"name" => "Alice", "age" => 21})

      vehicle.add_passenger(charlie)
      vehicle.add_passenger(jude)
      vehicle.add_passenger(taylor)
      vehicle.add_passenger(jill)

      vehicle_2.add_passenger(max)
      vehicle_2.add_passenger(alice)

      park.add_vehicle(vehicle)

      expect(park.all_attendees).to eq(["Charlie", "Jill", "Jude", "Taylor"])

      park.add_vehicle(vehicle_2)

      expect(park.all_attendees).to eq(["Alice", "Charlie", "Jill", "Jude", "Max", "Taylor"])
    end
  end

  describe "#minors" do
    it "returns all minors names, sorted alphabetically" do
      park = Park.new("Windmill Park", 5)

      vehicle = Vehicle.new("2001", "Honda", "Civic")
      vehicle_2 = Vehicle.new("2020", "Chevy", "Silverado")

      charlie = Passenger.new({"name" => "Charlie", "age" => 18})
      jude = Passenger.new({"name" => "Jude", "age" => 20})    
      taylor = Passenger.new({"name" => "Taylor", "age" => 12})
      jill = Passenger.new({"name" => "Jill", "age" => 10})

      max = Passenger.new({"name" => "Max", "age" => 23})
      alice = Passenger.new({"name" => "Alice", "age" => 21})

      vehicle.add_passenger(charlie)
      vehicle.add_passenger(jude)
      vehicle.add_passenger(taylor)
      vehicle.add_passenger(jill)

      vehicle_2.add_passenger(max)
      vehicle_2.add_passenger(alice)

      park.add_vehicle(vehicle)

      expect(park.minors).to eq(["Jill", "Taylor"])
      
      park.add_vehicle(vehicle_2)

      expect(park.minors).to eq(["Jill", "Taylor"])
    end
  end

  describe "#adults" do
    it "returns all adults names, sorted alphabetically" do
      park = Park.new("Windmill Park", 5)

      vehicle = Vehicle.new("2001", "Honda", "Civic")
      vehicle_2 = Vehicle.new("2020", "Chevy", "Silverado")

      charlie = Passenger.new({"name" => "Charlie", "age" => 18})
      jude = Passenger.new({"name" => "Jude", "age" => 20})    
      taylor = Passenger.new({"name" => "Taylor", "age" => 12})
      jill = Passenger.new({"name" => "Jill", "age" => 10})
      eliza = Passenger.new({"name" => "Eliza", "age" => 21})

      max = Passenger.new({"name" => "Max", "age" => 23})
      alice = Passenger.new({"name" => "Alice", "age" => 21})

      vehicle.add_passenger(charlie)
      vehicle.add_passenger(jude)
      vehicle.add_passenger(taylor)
      vehicle.add_passenger(jill)
      vehicle.add_passenger(eliza)

      vehicle_2.add_passenger(max)
      vehicle_2.add_passenger(alice)

      park.add_vehicle(vehicle)

      expect(park.adults).to eq(["Charlie", "Eliza", "Jude"])

      park.add_vehicle(vehicle_2)

      expect(park.adults).to eq(["Alice", "Charlie", "Eliza", "Jude", "Max"])
    end
  end
end